# -*- coding: utf-8 -*-
"""Jacob Askins Math 24 Lab 9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X9JUJvDQDs3i85aAHwK_1xxFLTwKxDMz
"""

import torch
from torchvision import datasets, transforms
import numpy as np
# Define a transform to normalize the data
transform = transforms.Compose([transforms.ToTensor()])

# Download and load the MNIST training data
train_data = datasets.MNIST(root='./data', train=True, download=True, transform=transform)

# Extracting the data and targets as tensors
train_images = train_data.data
train_labels = train_data.targets

train_images.shape, train_labels.shape

#Downloads and loads the MNIST training data, extracting images and labels as tensors.

import matplotlib.pyplot as plt

#Imports the Matplotlib library for visualization.

28*28

#Self-explanatory.

train_images[0,:,:]

#Accesses the first image in the MNIST training dataset.

x = train_images[0,:,:]

#Assigns the first image in the MNIST training dataset to variable `x`.

plt.imshow(x)

#Displays the first image in the MNIST training dataset using Matplotlib.

train_labels[0]

#Returns the label corresponding to the first image in the MNIST training dataset.

x.shape

#Returns the shape of the variable `x`, representing the dimensions of the image.

x.flatten()

#Flattens the 2D image into a 1D array.

x = x.flatten()

#Flattens the 2D image into a 1D array, assigning it back to variable `x`.

x.shape

#Returns the shape of the variable `x`, representing the dimensions of the image.

x = x.reshape(28,28)

#Reshapes the flattened array back into a 2D image of size 28x28.

x.shape

#Returns the shape of the variable `x`, representing the dimensions of the image.

m = torch.rand(10,784)

#Creates a random tensor `m` with shape (10, 784).

m

m.shape

#Returns the shape of the variable `m`, representing the dimensions of the image.

x = x.flatten()

#Flattens the 2D tensor `x` into a 1D tensor.

x = x/255.0

#Normalizes range of 'x'.

x

m.shape,x.shape

#Returns the shapes of tensors `m` and `x`.

m@x

#Performs matrix multiplication between tensors `m` and `x`.

y = torch.matmul(m,x)

#Performs matrix multiplication between tensors `m` and `x`, assigning the result to tensor `y`.

y

#Returns the result of the matrix multiplication between tensors `m` and `x`, stored in tensor `y`.

torch.max(y)

#Returns the maximum value in tensor `y`.

torch.argmax(y)

#Returns the index of the maximum value in tensor `y`.

x = train_images[0:25,:,:]/255.0

#Normalizes the first 25 images in the MNIST training dataset to range [0, 1].

x.shape

#Returns the shape of the normalized images stored in tensor `x`.

x = x.reshape(25,784)

#Reshapes the normalized images from shape (25, 28, 28) to shape (25, 784).

x.shape

#Returns the shape of the normalized images stored in tensor `x`.

x  = x.T

#Transposes the reshaped images, swapping rows and columns.

x.shape

#Returns the shape of the normalized images stored in tensor `x`.

y = m@x

y.shape


#Returns the shape of the normalized images stored in tensor `y`.

plt.imshow(y)

#Displays tensor `y` as an image using Matplotlib.

