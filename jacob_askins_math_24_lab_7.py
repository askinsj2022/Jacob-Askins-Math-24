# -*- coding: utf-8 -*-
"""Jacob Askins Math 24 Lab 7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mVB3SSZZsiWz5ZUMGLfI80v1caCj1GLb

Never Say Never - Documentary on Belousovâ€“Zhabotinsky Reaction BZ

https://www.youtube.com/watch?v=FvXwVZPOoBI


Image Kernels Explained Visually

https://setosa.io/ev/image-kernels/
"""

import numpy as np
from skimage import io as io
import matplotlib.pyplot as plt
from scipy import signal
import torch.nn.functional as F
from torch.nn.functional import *
import torch
import torch.nn as nn
import torchvision
import torchvision.transforms as transforms
import time
from matplotlib import animation, rc
from IPython.display import HTML
rc('animation', html='html5')


#Imports libraries for image processing, deep learning, and animation in Python.

def make_ani(A, colormap='gray'):

    fig, ax = plt.subplots()
    im = ax.imshow(A[0,:,:], cmap = colormap);
    ax.axis('off')
    fig.set_size_inches(12, 12)

    def animate(data, im):
        im.set_data(data)

    def step():
        for i in range(A.shape[0]):
            data = A[i,:,:]
            yield data

    return animation.FuncAnimation(fig, animate, step, interval=100, repeat=True, fargs=(im,))

    #Defines a function to create an animation from a 3D array, using matplotlib.

def plot(x):
    fig, ax = plt.subplots()
    im = ax.imshow(x, cmap = 'gray')
    ax.axis('off')
    fig.set_size_inches(15, 15)
    plt.show()

    #Defines a function to display an image with a gray colormap and no axes.

image = io.imread("https://www.filfre.net/wp-content/uploads/2013/12/bbc4.png")

#imports an image through url

image.shape #RGBa

plot(image)

#Displays the image

image.shape

#shape of image

plot(image[:,:,0])

#Displays the first channel of `image` using a grayscale colormap, with no axes, in a large format.

plot(image[:,:,1])

#Displays the second channel of an undefined `image` in grayscale without axes.

plot(image[:,:,2])

#Displays the third channel of an undefined `image` in grayscale without axes.

image.shape

#shape of image

image = np.mean(image, axis=2)

#Calculates the mean across color channels of `image`, reducing it to grayscale.

plot(image)

#Displays image

image.shape

#image shape

a = np.matrix([[1,2,1],[0,0,0],[-1,-2,-1]])

#Creates a matrix `a` with specific values, likely for image processing or filtering.

a

#prints the matrix for a

plot(a)

#plots a

image.shape

#Shpae of image

y = signal.convolve2d(image, a, mode='same')

#Convolves `image` with matrix `a`, output size matches `image`.

plot(y)

#Plots y

a = np.transpose(a)

#Transposes matrix `a`, swapping its rows and columns.

a

plot(a)

#displays a

y = signal.convolve2d(image, a, mode='same')

#Repeats convolution on `image` with transposed matrix `a`, maintaining `image` size.

plot(y)

b = np.random.random((25,25))

#Generates a 25x25 array of random floats between 0 and 1.

y = signal.convolve2d(image, b)

#Convolves a 2D image with a filter, outputting the filtered image.

plot(y)

x = io.imread("https://ichef.bbci.co.uk/news/660/cpsprodpb/C342/production/_88068994_thinkstockphotos-493881770.jpg")
x = x[:,:,0]

#Loads an image from a URL and extracts its red channel.

x = x.astype(float)

#Converts the image data to floating point type.

x

#Prints the array of x.

x = x / 255.0
plot(x)

#Normalizes the range to be between 0 and 1.

x

a

a[1,1]

def conv2(x,f):
    x2 = np.zeros(x.shape)
    for i in range(1,x.shape[0]-1):
        for j in range(1,x.shape[1]-1):

            x2[i,j] = f[0,0] * x[i-1,j-1]  \
            +         f[0,1] * x[i-1,j]    \
            +         f[0,2] * x[i-1,j+1]  \
            +         f[1,0] * x[i,j-1]    \
            +         f[1,1] * x[i,j]      \
            +         f[1,2] * x[i,j+1]    \
            +         f[2,0] * x[i+1,j-1]  \
            +         f[2,1] * x[i+1,j]    \
            +         f[2,2] * x[i+1,j+1]

    return x2

    #Performs 2D convolution on an image with a 3x3 filter manually.

a = np.matrix([[-1,-1,-1],[-1,8,-1],[-1,-1,-1]])
# a = np.matrix([[1,2,1],[0,0,0],[-1,-2,-1]])
# a = np.matrix([[1,1,1],[1,1,1],[1,1,1]])
# a = 5*np.random.random((3,3))-5*np.random.random((3,3))

a

z = conv2(x,a)

plot(z)

for i in range(10):
    a = 2*np.random.random((3,3))-1
    print(a)
    z=conv2(x,a)
    plot(z)

    #Generates and applies 10 random 3x3 filters to an image, plotting each result.



#Homemade Conv Loop Timing
a = 2*np.random.random((9,3,3))-1
start_time = time.time()
for i in range(9):

    z=conv2(x,a[i,:,:])

print("Seconds:", (time.time() - start_time))

#Applies 9 random 3x3 filters to an image, measuring execution time in seconds.

#Optimized Code Timing
a = 2*np.random.random((9,3,3))-1
start_time = time.time()
for i in range(9):

    z = signal.convolve2d(x,a[i,:,:])

print("--- %s seconds ---" % (time.time() - start_time))

#Uses optimized function for applying 9 filters to an image, measuring execution time.

#GPU Processing Timing, No Loop, 96 filters!!
a2 = 2*np.random.random((96,1,3,3))-1
x2 = torch.tensor(x).cuda()
a2 = torch.tensor(a2).cuda()
x2 = x2[None,None,:,:]

start_time = time.time()
z = conv2d(x2,a2)
print("--- %s seconds ---" % (time.time() - start_time))

#Processes an image with 96 filters on a GPU, measuring execution time; uses PyTorch.

z.shape

#Outputs tensor shape reflecting 96 filters applied, with adjusted height and width.



image = io.imread("https://img.jagranjosh.com/imported/images/E/Articles/Fastest-Fish-img.jpg").astype(float)/255.0
plot(image)

#Extracts and prints image from the url.

image.shape

#Shape of the image

plot(np.random.random((11,11,3)))

#Displays a plot of a random 11x11 RGB image.

image = np.transpose(image, (2, 0, 1))

#Reorders image dimensions from HxWxC to CxHxW format.

image.shape

#Prints the size of the image generated.

f = np.random.random((1,3,11,11))

#Creates a random filter with shape (1, 3, 11, 11) for convolution.

image.shape

#Prints the size of the image generated.

image = image[None,:,:,:]

#Adds a batch dimension to the image, making it a 4D tensor.

image.shape,f.shape

f =  torch.tensor(f)
image =  torch.tensor(image)

#Converts `f` and `image` to PyTorch tensors for processing.

image2 = F.conv2d(image,f)

#Performs 2D convolution on `image` with filter `f` using PyTorch.

image2 = image2.numpy()

#Converts the PyTorch tensor `image2` back to a NumPy array.

image2.shape

#prints the shape of the image.

image2[0,0,:,:].shape

plot(image2[0,0,:,:])

#Displays a plot of the first filter's output from the convolved image.



image = io.imread("http://ian-albert.com/games/super_mario_bros_maps/mario-2-2.gif")
image = image[:,0:700,:]
plot(image)

#Imports the image from the given URL.

coin = image[185:200,224:239,:]

#Selects a subsection of an image, possibly focusing on a specific object like a coin.

plot(coin)

#Plots 'coin'

image = image[60:,0:700,:]
plot(image)

#Crops the image to exclude the top 60 rows and rightmost columns beyond 700, then plots the result.

def scale1(x):
    return (x-np.min(x))/(np.max(x)-np.min(x))

    #Normalizes data to range [0, 1] by scaling based on min and max values.

image = np.mean(image,axis=2)
coin = np.mean(coin,axis=2)

image = scale1(image)
coin = scale1(coin)

#Converts `image` and `coin` to grayscale by averaging across color channels, then normalizes.

plot(image)
plot(coin)

coin.shape

image = image - np.mean(image)
coin = coin - np.mean(coin)

#Subtracts the mean from each pixel in `image` and `coin` for zero-centering.

image.shape,coin.shape

#Pints the shape of the coin and image.

coin = np.rot90(coin, 2)

#Rotates the `coin` array 180 degrees.

plot(coin)

z = signal.convolve2d(image,coin)

#Convolves `image` with `coin`, producing a 2D convolution output.

# z = conv2(image,coin)

plot(z)

#Displays a plot of the convolution output between the image and coin.

z == np.max(z)

#Checks if each element in `z` equals the maximum value in `z`, returns boolean array.

plot(z==np.max(z))

#Displays a plot highlighting the location of the maximum value in `z`.

np.where(z == np.amax(z))

#Finds the location (indices) of the maximum value in `z`.

[y,x] = np.where(z == np.amax(z))

#Stores the indices of the maximum value in `z` into variables `y` and `x`.

plt.plot(x,-y,'.')

#Plots the point marking the maximum value's location in `z` on a graph, inverting `y`.

fig, ax = plt.subplots()
im = ax.imshow(image, cmap = 'gray')
ax.axis('off')
ax.scatter(x-6, y-6, c='red', s=40)
fig.set_size_inches(18, 10)

#Displays `image` in grayscale, hides axes, and marks a specific location with a red dot, adjusting for offset.

def conv2(w,f): #GPU conv with padding

    n = conv2d(w.type(torch.int),f.type(torch.int))
    n = pad(n, (1, 1, 1, 1)) #add ones to the sides of the matrix

    return n

    #Convolves `w` with filter `f` on GPU with padding.

#Game of Life

w = (np.random.random((100,100)) > 0.5) #game of life world grid w
f = np.matrix([[1,1,1],[1,0,1],[1,1,1]])

#Creates a 100x100 binary grid for Conway's Game of Life and a 3x3 filter matrix `f`.

f

plot(w)

steps = 1000
A = torch.zeros((steps,100,100)) # storage for frames for animation
w = torch.tensor(w.astype(int))[None,None,:,:]
f = torch.tensor(f.astype(int))[None,None,:,:]

#Initializes storage for animation frames and converts `w` and `f` to PyTorch tensors.

# %%timeit
n = conv2(w,f)

#Executes the convolution operation `conv2` with `w` and `f`, measuring execution time.

# (n==2)[0,0,:,:].shape

plot((n==2)[0,0,:,:])

for i in range(steps):

    n = conv2(w,f)

    w = (w * (n==2)) + (n==3)

    A[i] = w

    #Executes Conway's Game of Life simulation for the specified number of steps, updating `w` based on convolution results.

make_ani(A)







#Surface Tension Model

w = (np.random.random((100,100)) > 0.5).astype(int)
f = np.matrix([[1,1,1],[1,1,1],[1,1,1]])

steps = 200
A = torch.zeros((steps,100,100)) # storage for frames for animation
w = torch.tensor(w)[None,None,:,:]
f = torch.tensor(f)[None,None,:,:]

#Creates a random 100x100 binary grid and a 3x3 filter matrix `f`.

for i in range(steps):

    n = conv2(w,f)

    w = ~((n<4) + (n==5))

    A[i] = w

    #Executes a variant of Conway's Game of Life simulation, updating `w` based on convolution results.

make_ani(A)

#Creates an animation from the frames stored in `A`.



#Forest Fire Model

# veg = {empty=0 burning=1 green=2}

Plightning = 0.00005
Pgrowth = 0.01

w = (np.random.random((100,100)) > 0.5).astype(int)
f = np.matrix([[1,1,1],[1,0,1],[1,1,1]])

steps = 1000
A = torch.zeros((steps,100,100)) # storage for frames for animation
w = torch.tensor(w)[None,None,:,:]
f = torch.tensor(f)[None,None,:,:]

#Sets initial parameters and initializes storage for animation frames. Converts `w` and `f` to PyTorch tensors.

for i in range(steps):

    n = w == 1

    n = conv2(n,f)

    w =  2*((w == 2)).type(torch.int)                                                \
    -    1*((w == 2) * ( n > 0 ) ).type(torch.int)                                   \
    -    1*((w == 2) * ( np.random.random((100,100)) < Plightning)).type(torch.int)  \
    +    2*((w == 0) * ( np.random.random((100,100)) < Pgrowth)).type(torch.int)

    A[i] = w

    #Executes a simulation with modified rules, updating `w` based on convolution results and probabilities. Stores frames for animation.

make_ani(A, colormap='magma')





#Nonlinear Waves

w = np.random.random((100,100)) < 0.1
f = np.matrix([[1,1,1],[1,0,1],[1,1,1]])

t  = 6  #center value=6; 7 makes fast pattern; 5 analiating waves
t1 = 3  #center value=3

steps = 1000
A = torch.zeros((steps,100,100)) # storage for frames for animation
w = torch.from_numpy(w)[None,None,:,:]
f = torch.from_numpy(f)[None,None,:,:]

#Sets initial parameters and initializes storage for animation frames. Converts `w` and `f` to PyTorch tensors.

for i in range(1000):

    n = (w>0)&(w<t)

    n = conv2(n,f)

    w = ((w==0) & (n>=t1)) \
    +  2*(w==1)            \
    +  3*(w==2)            \
    +  4*(w==3)            \
    +  5*(w==4)            \
    +  6*(w==5)            \
    +  7*(w==6)            \
    +  8*(w==7)            \
    +  9*(w==8)            \
    +  0*(w==9)            \

    A[i] = w

    #Executes a simulation with modified rules, updating `w` based on convolution results. Stores frames for animation.

make_ani(A)





#Wireword Wire
#{empty=0 electron_head=1 electron_tail=2, wire=3}

w = np.zeros((100,100))
w[50,:] = 3
w[50,5] = 2
w[50,6] = 1

f = np.matrix([[1,1,1],[1,0,1],[1,1,1]])

steps = 1000
A = torch.zeros((steps,100,100)) # storage for frames for animation
w = torch.from_numpy(w)[None,None,:,:]
f = torch.from_numpy(f)[None,None,:,:]

#Initializes a specific pattern `w` and a filter `f`. Prepares storage for animation.

for i in range(100):

    n=w==1

    n = conv2(n,f)

    w = 1*((w==3)& ((n==1) | (n==2)))                 \
    +   3*((w==3)& ((n!=1) & (n!=2)))                 \
    +   0*(w==0)                    \
    +   2*(w==1)                    \
    +   3*(w==2)                    \

    A[i] = w

    #Executes a simulation with modified rules, updating `w` based on convolution results. Stores frames for animation.

make_ani(A, colormap='magma')



#Wireworld Oscillator

w = np.zeros((100,100))
w[50,15:-1] = 3
w[48,5:15] = 3
w[52,5:15] = 3
w[49:52,4] = 3
w[49:52,15] = 3
w[52,14] = 1
w[52,13] = 2

f = np.matrix([[1,1,1],[1,0,1],[1,1,1]])

steps = 1000
A = torch.zeros((steps,100,100)) # storage for frames for animation
w = torch.from_numpy(w)[None,None,:,:]
f = torch.from_numpy(f)[None,None,:,:]

#Initializes a specific pattern `w` and a filter `f`. Prepares storage for animation.

for i in range(steps):

    n = w == 1

    n = conv2(n,f)

    w = 0*((w==0))                                    \
    +   2*((w==1))                                    \
    +   3*((w==2))                                    \
    +   3*((w==3)& ((n!=1) & (n!=2)))                 \
    +   1*((w==3)& ((n==1) | (n==2)))                 \

    A[i] = w

    #Executes a simulation with modified rules, updating `w` based on convolution results. Stores frames for animation.

make_ani(A, colormap='magma')





#FitzHugh-Nagumo Reaction Diffusion

def laplacian(U):
    n = conv2d(U,laplace)
    n = pad(n, (1, 1, 1, 1),'circular')
    return n

    #Applies Laplacian filter to an input image using convolution.

laplace = 0.5*np.array([[0.5, 1.0, 0.5],
                        [1.0, -6., 1.0],
                        [0.5, 1.0, 0.5]])

#Defines a Laplacian filter kernel for convolution operation.

N = 256
h = 0.05

A = np.zeros([N, N], dtype=np.float32)

A = A + -0.7

noise_shape = A[:,120:130].shape

A[:,120:130] = (np.random.normal(0.9,0.05,size=noise_shape))

B = np.zeros([N, N], dtype=np.float32)

B = B + -0.3

#Creates matrices `A` and `B` with specific noise patterns.

w1 = plot(A)

a0 = -0.1
a1 = 2
epsilon = 0.05
delta = 4
k1 = 1
k2 = 0
k3 = 1

#Sets parameters `a0`, `a1`, `epsilon`, `delta`, `k1`, `k2`, and `k3`.

A = torch.from_numpy(A)[None,None,:,:].cuda()
B = torch.from_numpy(B)[None,None,:,:].cuda()
laplace = torch.from_numpy(laplace)[None,None,:,:].type(torch.float).cuda()

#Converts matrices to PyTorch tensors and moves them to GPU for computation.

steps = 100
P = torch.zeros((steps,N,N)) # storage for frames for animation

j = 0
for i in range(steps*1000):

    A += h*( k1*A - k2*A**2 - A**3 - B + laplacian(A))
    B += h*( epsilon*(k3*A - a1*B -a0) + delta*laplacian(B) )

    if i % 1000 == 0:
        P[j] = A
        j += 1

        #Executes a simulation loop, updating matrices `A` and `B` based on specific equations. Stores frames for animation every 1000 steps.

make_ani(P)



#Gray Scott Reaction Diffusion

laplace = 0.5*np.array([[0.5, 1.0, 0.5],
                        [1.0, -6., 1.0],
                        [0.5, 1.0, 0.5]])

#Redefines the Laplacian filter kernel for convolution operation.

laplace = torch.from_numpy(laplace)[None,None,:,:].type(torch.float).cuda()

#Converts the Laplacian filter kernel to a PyTorch tensor and moves it to GPU for computation.

def laplacian(U):
    n = conv2d(U,laplace)
    n = pad(n, (1,1,1,1))
    n = pad(n, (0,0,0,0))
    return n

    #Applies Laplacian filter to an input image using convolution with padding.

(Du, Dv, F, k) = ((0.16, 0.08, 0.035, 0.065)) # Bacteria 1
# (Du, Dv, F, k) = ((0.14, 0.06, 0.035, 0.065)) # Bacteria 2
# (Du, Dv, F, k) = ((0.16, 0.08, 0.060, 0.062)) # Coral
# (Du, Dv, F, k) = ((0.19, 0.05, 0.060, 0.062)) # Fingerprint
# (Du, Dv, F, k) = ((0.10, 0.10, 0.018, 0.050)) # Spirals
# (Du, Dv, F, k) = ((0.12, 0.08, 0.020, 0.050)) # Spirals Dense
# (Du, Dv, F, k) = ((0.10, 0.16, 0.020, 0.050)) # Spirals Fast
# (Du, Dv, F, k) = ((0.16, 0.08, 0.020, 0.055)) # Unstable
# (Du, Dv, F, k) = ((0.16, 0.08, 0.050, 0.065)) # Worms 1
# (Du, Dv, F, k) = ((0.16, 0.08, 0.054, 0.063)) # Worms 2
# (Du, Dv, F, k) = ((0.16, 0.08, 0.035, 0.060)) # Zebrafish

N = 256

U = np.zeros((N,N)) # Clear Chemicals
V = np.zeros((N,N))

U = U + 1.0
r = 5
U[N//2-r:N//2+r,N//2-r:N//2+r] = 0.50 # Add Disturbance in Center Square Radius r
V[N//2-r:N//2+r,N//2-r:N//2+r] = 0.25

U += 0.05*np.random.random((N,N)) # Add Noise to Chemicals
V += 0.05*np.random.random((N,N))

U = torch.from_numpy(U)[None,None,:,:].type(torch.float).cuda()
V = torch.from_numpy(V)[None,None,:,:].type(torch.float).cuda()

steps = 2000
skip = 100
P = torch.zeros((steps,N,N)) # storage for frames for animation

#Initializes parameters and matrices for a reaction-diffusion simulation. Prepares storage for animation.b

j = 0
for i in range(steps*skip):

    U += ( Du*laplacian(U) - U*V**2 +  F   *(1-U) )
    V += ( Dv*laplacian(V) + U*V**2 - (F+k)*V     )

    if i % skip == 0:
        P[j] = U
        j += 1

        #Executes a reaction-diffusion simulation loop, updating matrices `U` and `V` based on specific equations. Stores frames for animation every `skip` steps.

make_ani(P)











# (Du, Dv, F, k) = ((0.16, 0.08, 0.035, 0.065)) # Bacteria 1
# (Du, Dv, F, k) = ((0.14, 0.06, 0.035, 0.065)) # Bacteria 2
# (Du, Dv, F, k) = ((0.16, 0.08, 0.060, 0.062)) # Coral
# (Du, Dv, F, k) = ((0.19, 0.05, 0.060, 0.062)) # Fingerprint
# (Du, Dv, F, k) = ((0.10, 0.10, 0.018, 0.050)) # Spirals
# (Du, Dv, F, k) = ((0.12, 0.08, 0.020, 0.050)) # Spirals Dense
# (Du, Dv, F, k) = ((0.10, 0.16, 0.020, 0.050)) # Spirals Fast
# (Du, Dv, F, k) = ((0.16, 0.08, 0.020, 0.055)) # Unstable
# (Du, Dv, F, k) = ((0.16, 0.08, 0.050, 0.065)) # Worms 1
# (Du, Dv, F, k) = ((0.16, 0.08, 0.054, 0.063)) # Worms 2
(Du, Dv, F, k) = ((0.16, 0.08, 0.035, 0.060)) # Zebrafish

N = 256

U = np.zeros((N,N)) # Clear Chemicals
V = np.zeros((N,N))

U = U + 1.0
r = 5
U[N//2-r:N//2+r,N//2-r:N//2+r] = 0.50 # Add Disturbance in Center Square Radius r
V[N//2-r:N//2+r,N//2-r:N//2+r] = 0.25

U += 0.05*np.random.random((N,N)) # Add Noise to Chemicals
V += 0.05*np.random.random((N,N))

U = torch.from_numpy(U)[None,None,:,:].type(torch.float).cuda()
V = torch.from_numpy(V)[None,None,:,:].type(torch.float).cuda()

steps = 2000
skip = 100
P = torch.zeros((steps,N,N)) # storage for frames for animation

j = 0
for i in range(steps*skip):

    U += ( Du*laplacian(U) - U*V**2 +  F   *(1-U) )
    V += ( Dv*laplacian(V) + U*V**2 - (F+k)*V     )

    if i % skip == 0:
        P[j] = U
        j += 1

make_ani(P)









# (Du, Dv, F, k) = ((0.16, 0.08, 0.035, 0.065)) # Bacteria 1
# (Du, Dv, F, k) = ((0.14, 0.06, 0.035, 0.065)) # Bacteria 2
(Du, Dv, F, k) = ((0.16, 0.08, 0.060, 0.062)) # Coral
# (Du, Dv, F, k) = ((0.19, 0.05, 0.060, 0.062)) # Fingerprint
# (Du, Dv, F, k) = ((0.10, 0.10, 0.018, 0.050)) # Spirals
# (Du, Dv, F, k) = ((0.12, 0.08, 0.020, 0.050)) # Spirals Dense
# (Du, Dv, F, k) = ((0.10, 0.16, 0.020, 0.050)) # Spirals Fast
# (Du, Dv, F, k) = ((0.16, 0.08, 0.020, 0.055)) # Unstable
# (Du, Dv, F, k) = ((0.16, 0.08, 0.050, 0.065)) # Worms 1
# (Du, Dv, F, k) = ((0.16, 0.08, 0.054, 0.063)) # Worms 2
# (Du, Dv, F, k) = ((0.16, 0.08, 0.035, 0.060)) # Zebrafish

N = 256

U = np.zeros((N,N)) # Clear Chemicals
V = np.zeros((N,N))

U = U + 1.0
r = 5
U[N//2-r:N//2+r,N//2-r:N//2+r] = 0.50 # Add Disturbance in Center Square Radius r
V[N//2-r:N//2+r,N//2-r:N//2+r] = 0.25

U += 0.05*np.random.random((N,N)) # Add Noise to Chemicals
V += 0.05*np.random.random((N,N))

U = torch.from_numpy(U)[None,None,:,:].type(torch.float).cuda()
V = torch.from_numpy(V)[None,None,:,:].type(torch.float).cuda()

steps = 8000
skip = 100
P = torch.zeros((steps,N,N)) # storage for frames for animation

j = 0
for i in range(steps*skip):

    U += ( Du*laplacian(U) - U*V**2 +  F   *(1-U) )
    V += ( Dv*laplacian(V) + U*V**2 - (F+k)*V     )

    if i % skip == 0:
        P[j] = U
        j += 1

make_ani(P)

