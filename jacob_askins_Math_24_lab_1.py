# -*- coding: utf-8 -*-
"""Jacob Askins 24 Lab 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vkbCDWNvq1C1i-m-zPGC5kT8PTJ88L9P

## Python Basics

### Calculator
"""

# Comments with hashtag, python ignores this

#This comment demonstrates what a Comment is.

"""The following is examples of the calculator funtion in Python"""

30.34321 + 9.12313 - 3.5567
#Basic Addition and subtraction

2*2

#Multiplication

2**8

#expoentional Value, 2 to the power of 8

2**123

#2 to the power of 123

2**12345

#2 to the power of 1234, This demonstrates the campabilites of Google Colab as it can solve very high value math problems

import sys    #provides access to sys module
sys.set_int_max_str_digits(100000) #How many dities it wants to produce (100000)
2**45678

#This further demonstrates the capibilites of Python

8/4

#Division

8//4

#division without deci.

8%12

# represents the modulo operation. The modulo operation finds the remainder when one number is divided by another

13%12

# represents the modulo operation. The modulo operation finds the remainder when one number is divided by another

22%12

# represents the modulo operation. The modulo operation finds the remainder when one number is divided by another

24%12

# represents the modulo operation. The modulo operation finds the remainder when one number is divided by another

"""### Variables"""

apples = 5

#This creates a variable

oranges = 8

#This also creates a variable

total = apples + oranges

#This demonstrates that python will remember certain variables and can be used in later eqautions or code

total

#Prints out the total value from the previous line

apples**2

#Shows that you can use varibles in calculations

cost_per_apple = 0.25

total_apple_costs = cost_per_apple * apples

total_apple_costs

"""### Vectors"""

import numpy as np
import matplotlib.pyplot as plt

#This code imports the NumPy library, which is used for numerical operations in Python, and the Matplotlib's pyplot module, which is used for creating static, interactive, and animated visualizations in Python.

np.arange(10)

#makes an array of 0 to 9. It does not reach the actual actual number, for this case it's (10), also it counts 0

x = np.arange(10)

#Makes the array a variable

x

#prints variable

y = 3 * x + 5

#Uses aray in a eqaution, producing another array and assigning it to a varible y

y

#Prints variable

# x = np.array([133,24,333,4,5,6])
# y = np.array([11,22,33,44,55,66])

x,y

"""### Plotting"""

plt.plot(x,y)

#This is how to create a plot for x and y. x varible in the horizontal direction an the y variable in the vertical direction

plt.plot(x,y,'.')

#Instead of it being a line, this displays points instead '.'

plt.plot(x,y,'r.')

#Similar to the previous but instead changes the color to red 'r.'

plt.plot(x,y,'b--')

#Similar to the previous but instead changes the color to blue and dashes

import matplotlib.pyplot as plt

plt.plot(x,y)

#This code imports the pyplot module from the matplotlib library, commonly used for creating 2D graphics and visualizations in Python, and aliases it as plt for convenient reference.

x = np.linspace(0,5,10)

#Creates a variable assigned to an array from 0 to 5, in 10 values from (0,.5,1,1.5, etc)

x

#Prints variable

y = x**2

#Creates another variable

plt.plot(x,y)

#Creates a plot for x and y

plt.plot(x,y)
plt.title("New Graph of x**2");
plt.xlabel("x");
plt.ylabel("y");

#This is how to add different this to a graph, ie title, label in x and y

plt.plot(x,y,label="x squared")
plt.title("Graph of x**2");
plt.xlabel("x");
plt.ylabel("y");
plt.legend()

#Similar to previous code, but with a legend

x = np.linspace(0, 2, 100)

plt.plot(x, x, label='linear')
plt.plot(x, x**2, label='quadratic')
plt.plot(x, x**3, label='cubic')

plt.xlabel('x label')
plt.ylabel('y label')

plt.title("Simple Plot")

plt.legend()

#Similar to previous code, but with multiple lines

labels = 'Frogs', 'Dogs', 'Cats', 'Birds'
sizes = [15, 30, 40, 15]
explode = (0, 0.1, 0, 0)  # only "explode" the 2nd slice (i.e. 'Dogs')

fig1, ax1 = plt.subplots()
ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90)
ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

#This is how to make a pie graph

import numpy as np
import matplotlib.pyplot as plt
t = np.arange(0.0, 2.0, 0.01)
s = np.sin(2*np.pi*t)

plt.plot(t, s)
plt.title(r'$\alpha_i > \beta_i$', fontsize=20)
plt.text(1, -0.6, r'$\sum_{i=0}^\infty x_i$', fontsize=20)
plt.text(0.5, 0.6, r'$\mathcal{A}\mathrm{sin}(2 \omega t)$',fontsize=15)
plt.xlabel('time (s)')
plt.ylabel('volts (mV)')
plt.show()

#This code imports NumPy and Matplotlib's pyplot, creates a sine wave plot with annotated mathematical expressions, and labels for time and voltage axes, displaying it as a graph.

"""Plot the following functions from $x = -10$ to $x = 10$

(Hint: np.sin, np.exp)

$y = 10x+7$

$y = -3x-12$

$y=\sin(x)$

$y=e^x$

$y=e^{-x^2}$

Pick out a plot of your choice from [here](https://matplotlib.org/stable/gallery/index.html), copy the code to this notebook, run, and document to the best of your abilities.
"""

import matplotlib.pyplot as plt
import numpy as np

from matplotlib.colors import Normalize
from matplotlib.markers import MarkerStyle
from matplotlib.text import TextPath
from matplotlib.transforms import Affine2D

SUCCESS_SYMBOLS = [
    TextPath((0, 0), "â˜¹"),
    TextPath((0, 0), "ðŸ˜’"),
    TextPath((0, 0), "â˜º"),
]

N = 25
skills = np.random.uniform(5, 80, size=N) * 0.1 + 5
takeoff_angles = np.random.normal(0, 90, N)
thrusts = np.random.uniform(size=N)
successful = np.random.randint(0, 3, size=N)
positions = np.random.normal(size=(N, 2)) * 5
data = zip(skills, takeoff_angles, thrusts, successful, positions)

cmap = plt.colormaps["jet"]
fig, ax = plt.subplots()
fig.suptitle("Throwing success", size=14)
for skill, takeoff, thrust, mood, pos in data:
    t = Affine2D().scale(skill).rotate_deg(takeoff)
    m = MarkerStyle(SUCCESS_SYMBOLS[mood], transform=t)
    ax.plot(pos[0], pos[1], marker=m, color=cmap(thrust))


plt.show()

#This plot was import from another service, the purpose is for us to play around with different values

"""### Graphics Output"""

from IPython.core.display import display, HTML
#The code from IPython.core.display import display, HTML imports the display and HTML functions from the IPython.core.display module, enabling the embedding of HTML content and the customized display of outputs

display(HTML('<h1>Hello World!</h1>'))

#This Code Prints out Hello world.

"""### Numpy - Numerical Python"""

import numpy as np
#The code import numpy as np imports the NumPy library into your Python environment and aliases it as np.

np.random.random()

#Random number from 0 to 1

np.random.random() > 0.5;

#random numeber from .5 to 1

r = np.random.random(); print(r); r >0.5

#assigns a random number to r, and checks to see if it is greater than .5, either true or false

r
#Prints the variable

r > 0.5

#determines if the variable is true or false







def flip_coin():
    if np.random.random() > 0.5:
        print("Heads")
    else:
        print("Tails")

#This creates a coin flip senario, so its a 50/50 shot is it heads or tails. So if it is > heads and if it is not that, then it is false. This also shows how an "if else syntax works"

flip_coin()

#This displays the coin flip results

np.random.randint(15,20)

#Gives a random number between 15 and 20

def coin():
  return np.random.randint(2)

  #gives coin a rounded number between 0 and 1 instead of a decimal number. so .45668 is 0 and .6589 is 1

coin()

#displaces coin value

display(HTML('<img src="https://random-ize.com/coin-flip/us-quarter/us-quarter-front.jpg">'))
#inputs an image from the internet

heads = 'https://random-ize.com/coin-flip/us-quarter/us-quarter-front.jpg'
tails = 'https://random-ize.com/coin-flip/us-quarter/us-quarter-back.jpg'

#Imports images of head and tails of a quarter

def show_img(img):
  display(HTML('<img src=' + img + '>'))

show_img(heads)

#Shows head

show_img(tails)

#shows tails

def flip_coin():

    if coin():
        show_img(heads)
    else:
        show_img(tails)

#Creates and if else condition for the "Coin flip"

flip_coin()

#Shows coin results

for i in range(5):
    flip_coin()

#Runs coin flip 5 times and prints images of results





"""# Cards"""



card_url_head = "https://www.improvemagic.com/wp-content/uploads/2020/11/"
card_url_tail = ".png"

#The code sets up base and extension parts of a URL for card images, allowing the construction of complete URLs by appending a specific card identifier in between.

suit = ['k','p','s','l'] #clubs,spades,hearts,diamonds
card = ['a','2','3','4','5','6','7','8','9','10','j','q','k']

#Creates variables for the suit and the different cards

i = np.random.randint(4)
j = np.random.randint(13)

#random number gen to randomize what card to select

i,j

suit[i]

#Random suit

card[j]

#Random card value

def card_image(card_number):

    i = card_number//13
    j = card_number%13

    return suit[i]+card[j]

#Combines random suit and card value into one value

card_image(3)

#Displays card

img = card_url_head + card_image(3) + card_url_tail

#tells code what image to print

img

#pulls image from internet

show_img(img)

#display card pulled

for i in range(52):
    img = card_url_head + card_image(i) + card_url_tail
    show_img(img)

#this displays all the card possible in a standard deck

import random

def initialize_deck():
    #Create and shuffle a deck of 52 cards represented by numbers 0-51.
    deck = list(range(52))
    random.shuffle(deck)
    return deck

def draw_cards(deck, top_index, num=5):
    drawn_cards = deck[top_index:top_index + num]
    return drawn_cards, top_index + num

# Initialize and shuffle the deck
deck = initialize_deck()
top_index = 0  # Start at the beginning of the deck

#This just randomizes the deck

deck

# Draw 5 cards for a poker hand
hand, top_index = draw_cards(deck, top_index, 5)

#This "Draws", 5 random cards without repeating

hand

#This is the hand you drew

hand, top_index = draw_cards(deck, top_index, 5)

#Another hand

hand

#displays hand

# Display the hand
for card_number in hand:
    img_url = card_url_head + card_image(card_number) + card_url_tail
    show_img(img_url)

#Displays the actual card and not just a value

def show_hand(hand):
    images_html = ''.join([f'<img src="{card_url_head + card_image(card_number) + card_url_tail}" style="display:inline-block; margin:5px;" />' for card_number in hand])
    display(HTML(images_html))

show_hand(hand)

#Displays the hand you drew





"""# Rank Hand"""

def evaluate_hand(hand):
    rank_values = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'j': 11, 'q': 12, 'k': 13, 'a': 14}
    suits = ['k', 'p', 's', 'l']  # clubs, spades, hearts, diamonds

    # Convert the hand to a list of (rank, suit) tuples
    converted_hand = [(rank_values[card[card_number % 13]], suits[card_number // 13]) for card_number in hand]
    converted_hand.sort()

    rank_counts = {rank: 0 for rank in rank_values.values()}
    suit_counts = {suit: 0 for suit in suits}
    for rank, suit in converted_hand:
        rank_counts[rank] += 1
        suit_counts[suit] += 1

    # Check for flush
    is_flush = max(suit_counts.values()) == 5

    # Check for straight and royal flush
    rank_sequence = [rank for rank, _ in converted_hand]
    is_straight = all(rank_sequence[i] - rank_sequence[i - 1] == 1 for i in range(1, 5))
    is_royal = is_straight and rank_sequence[0] == 10

    # Check for other hand types
    pairs = sum(1 for count in rank_counts.values() if count == 2)
    three_of_a_kind = 3 in rank_counts.values()
    four_of_a_kind = 4 in rank_counts.values()

    if is_royal and is_flush:
        return "Royal Flush"
    elif is_straight and is_flush:
        return "Straight Flush"
    elif four_of_a_kind:
        return "Four of a Kind"
    elif three_of_a_kind and pairs == 1:
        return "Full House"
    elif is_flush:
        return "Flush"
    elif is_straight:
        return "Straight"
    elif three_of_a_kind:
        return "Three of a Kind"
    elif pairs == 2:
        return "Two Pair"
    elif pairs == 1:
        return "One Pair"
    else:
        return "High Card"

#This gives the card you picked a value, similar to an hand of poker there is high card, pair, trips, flush etc



# Initialize and shuffle the deck
deck = initialize_deck()
top_index = 0  # Start at the beginning of the deck

hand, top_index = draw_cards(deck, top_index, 5)


print(evaluate_hand(hand))
show_hand(hand)

#This shows the cards and the hand name



for i in range(10):
    # Initialize and shuffle the deck
    deck = initialize_deck()
    top_index = 0  # Start at the beginning of the deck

    hand, top_index = draw_cards(deck, top_index, 5)


    print(evaluate_hand(hand))
    show_hand(hand)

    #This code pulls all the avaiable cards in the deck and gives the hand name associated with the hand



for i in range(100):
    # Initialize and shuffle the deck
    deck = initialize_deck()
    top_index = 0  # Start at the beginning of the deck

    hand, top_index = draw_cards(deck, top_index, 5)

    if evaluate_hand(hand) == "Two Pair":
        print("Winner!")
        show_hand(hand)

#If there are two pairs then they are made winners



for i in range(1000):
    # Initialize and shuffle the deck
    deck = initialize_deck()
    top_index = 0  # Start at the beginning of the deck

    hand, top_index = draw_cards(deck, top_index, 5)

    if evaluate_hand(hand) == "Flush":
        print("Winner!")
        show_hand(hand)

#If there is a flush then they are considered winnners

# Commented out IPython magic to ensure Python compatibility.
# %%timeit
# # Initialize and shuffle the deck
# deck = initialize_deck()
# top_index = 0  # Start at the beginning of the deck
# 
# hand, top_index = draw_cards(deck, top_index, 5)
# 
# if evaluate_hand(hand) == "Royal Flush":
#     print("Winner!")
#     show_hand(hand)
# #Probabilty of getting a royal flush

for i in range(1000000):
    # Initialize and shuffle the deck
    deck = initialize_deck()
    top_index = 0  # Start at the beginning of the deck

    hand, top_index = draw_cards(deck, top_index, 5)

    if evaluate_hand(hand) == "Royal Flush":
        print("Winner!")
        show_hand(hand)

#Pulls the hand that are royal flushes



wins = 0
N = 10000000

for i in range(N):
    # Initialize and shuffle the deck
    deck = initialize_deck()
    top_index = 0  # Start at the beginning of the deck

    hand, top_index = draw_cards(deck, top_index, 5)

    if evaluate_hand(hand) == "Royal Flush":
        wins += 1
        print("Winner!")
        show_hand(hand)

#Pulls the deck N amount of times and displays how many royal flushes were pulled

wins/N

#displays Royal Flushes per number of pulls

